###
# This Python script generates the content of games.h.
# Do not edit games.h directly, but change games.csv and run this script to
# update games.h (on Linux systems just redirect the output to games.h)
# The reason for not editing games.h directly is that the data has to be
# sorted by vramHash2, the precompiler define for the list length has to be
# set correctly and the entries of gameInfosDirectory have to point at the
# right indices.
###

import csv

gameInfos = []
gameInfosDirectory = []

with open('games.csv') as csvfile:
    reader = csv.DictReader(csvfile, delimiter=',', quotechar='"', skipinitialspace=True)
    currentDirectoryIndex = -1
    for row in sorted(reader, key=lambda d: d["vramHash2"]):
        hashIndex = (int(row["vramHash2"], 16) >> 24) & 0xff
        while hashIndex > currentDirectoryIndex:
            gameInfosDirectory.append(len(gameInfos))
            currentDirectoryIndex += 1
        gameInfos.append( \
            "    {" + \
            ".vramHash1 = " + row["vramHash1"] + ", " + \
            ".vramHash2 = " + row["vramHash2"] + ", " + \
            ".dmaFix = " + row["dmaFix"] + ", " + \
            ".title = \"" + row["title"] + "\", " + " "*(18-len(row["title"])) + \
            "}, // " + row["comment"]\
        )
while 256 > currentDirectoryIndex:
    gameInfosDirectory.append(len(gameInfos))
    currentDirectoryIndex += 1

print("// Do not edit this file directly!")
print("// Edit games.csv instead and use the Python script build_games_h.py to regenerate games.h.");
print("")
print("#define GAME_LIST_SIZE " + str(len(gameInfos)))
print("")
print("struct GameInfo __in_flash(\"games\") gameInfos[GAME_LIST_SIZE] = {")
for gameInfo in gameInfos:
    print(gameInfo)
print("};")
print("")
print("uint16_t gameInfoDirectory[257] = {")
print("    " + ", ".join(map(str, gameInfosDirectory)))
print("};")
